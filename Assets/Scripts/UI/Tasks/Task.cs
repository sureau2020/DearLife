using System;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class Task : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI taskNameText; 
    [SerializeField] private TextMeshProUGUI ddlText; 
    [SerializeField] private TextMeshProUGUI estimatedMinSalaryText;
    [SerializeField] private Button completeButton; // 完成任务按钮
    [SerializeField] private Button deleteButton; // 删除任务按钮
    
    private MissionData missionData;
    private GameSettings settings;

    public void Initialize(MissionData missionData, GameSettings settings)
    {
        this.missionData = missionData;
        this.settings = settings;

        UpdateTaskDisplay();
        SetupButtons();
    }

    private void UpdateTaskDisplay()
    {
        // 设置任务名称，如果已完成则添加（已完成）标识
        if (string.IsNullOrEmpty(missionData.Title))
        {
            taskNameText.text = missionData.IsCompleted ? "未命名任务（已完成）" : "未命名任务";
        }
        else
        {
            taskNameText.text = missionData.IsCompleted ? $"{missionData.Title}（已完成）" : missionData.Title;
        }

        // 设置截止时间
        if (!missionData.HasDeadline)
        {
            ddlText.text = "无截止时间";
        }
        else
        {
            ddlText.text = missionData.Deadline.ToString("HH:mm");
        }

        // 设置预估薪资
        if (missionData.Duration <= 0 || missionData.Difficulty <= 0)
        {
            estimatedMinSalaryText.text = "无预估薪资";
        }
        else
        {
            int estimatedSalary = Calculators.EstimatedMinSalary(
                missionData.Duration, 
                missionData.Difficulty, 
                settings.HourlyWage, 
                settings.DifficultyBonus
            );
            estimatedMinSalaryText.text = $"最低薪资：{estimatedSalary} 金币";
        }
    }

    private void SetupButtons()
    {
        if (completeButton != null)
        {
            // 如果任务已完成，禁用完成按钮
            completeButton.interactable = !missionData.IsCompleted;
            completeButton.onClick.RemoveAllListeners();
            completeButton.onClick.AddListener(OnCompleteTask);
        }

        if (deleteButton != null)
        {
            deleteButton.onClick.RemoveAllListeners();
            deleteButton.onClick.AddListener(OnDeleteTask);
        }
    }

 
    public void OnCompleteTask()
    {
        // 调用 StateManager 完成任务
        var result = GameManager.Instance.StateManager.CompleteMission(missionData);
        
        if (result.Success)
        {
            Debug.Log($"任务 '{missionData.Title}' 完成成功！");
            
            // 更新UI显示
            UpdateTaskDisplay();
            
            // 刷新任务列表（通知 TaskManager 更新当天的任务显示）
            var selectedDate = GetTaskDate();
            TaskManager.Instance.OnDaySelected(selectedDate);
        }
        else
        {
            Debug.LogWarning($"任务完成失败: {result.Message}");
        }
    }

    public void OnDeleteTask()
    {
        var selectedDate = GetTaskDate();
        
        // 从 DayMissionData 中删除任务
        var dayMissionData = TaskManagerModel.Instance.GetMonth(selectedDate.ToString("yyyy-MM"))
            .GetDayMissionData(selectedDate.ToString("yyyy-MM-dd"));
        dayMissionData.DeleteSpecificMission(missionData);
        
        Debug.Log($"任务 '{missionData.Title}' 删除成功！");
        
        // 刷新任务列表
        TaskManager.Instance.OnDaySelected(selectedDate);
    }


    private DateTime GetTaskDate()
    {
        // 如果任务有截止时间，使用截止时间的日期
        if (missionData.HasDeadline)
        {
            return missionData.Deadline.Date;
        }
        
        // 如果没有截止时间，使用当前选中的日期
        return TaskManager.Instance.SelectedDate;
    }

    private void OnDestroy()
    {
        // 清理事件监听
        if (completeButton != null)
        {
            completeButton.onClick.RemoveAllListeners();
        }
        if (deleteButton != null)
        {
            deleteButton.onClick.RemoveAllListeners();
        }
    }
}
